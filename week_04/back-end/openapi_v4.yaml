openapi: 3.0.0
info:
  title: Library API v4
  version: 4.0.0
  description: API for managing books and borrows in the library system, version 4.
servers:
  - url: http://127.0.0.1:5000/api/v4
    description: Local Development Server
paths:
  /books:
    get:
      summary: Get all books
      description: Retrieve a list of all books with ETag caching.
      responses:
        '200':
          description: A list of books.
          headers:
            ETag:
              schema:
                type: string
              description: ETag for caching.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '304':
          description: Not Modified (cached response).
      tags:
        - Books
    post:
      summary: Create a new book
      description: Add a new book to the library.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Book created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '400':
          description: Invalid input.
      tags:
        - Books
  /books/{book_id}:
    get:
      summary: Get a single book by ID
      description: Retrieve a single book by its ID.
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to retrieve.
      responses:
        '200':
          description: A single book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.
      tags:
        - Books
    put:
      summary: Update an existing book
      description: Update the details of an existing book.
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '200':
          description: Book updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Book not found.
        '400':
          description: Invalid input.
      tags:
        - Books
    delete:
      summary: Delete a book
      description: Delete a book by its ID.
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to delete.
      responses:
        '200':
          description: Book deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Book not found.
      tags:
        - Books
  /borrows:
    get:
      summary: Get all borrows
      description: Retrieve a list of all borrows with ETag caching.
      responses:
        '200':
          description: A list of borrows.
          headers:
            ETag:
              schema:
                type: string
              description: ETag for caching.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Borrow'
        '304':
          description: Not Modified (cached response).
      tags:
        - Borrows
    post:
      summary: Create a new borrow
      description: Add a new borrow record.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBorrow'
      responses:
        '201':
          description: Borrow created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '400':
          description: Invalid input.
      tags:
        - Borrows
  /borrows/{borrow_id}:
    get:
      summary: Get a single borrow by ID
      description: Retrieve a single borrow by its ID.
      parameters:
        - in: path
          name: borrow_id
          schema:
            type: integer
          required: true
          description: ID of the borrow to retrieve.
      responses:
        '200':
          description: A single borrow.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrow'
        '404':
          description: Borrow not found.
      tags:
        - Borrows
    put:
      summary: Update an existing borrow
      description: Update the details of an existing borrow record.
      parameters:
        - in: path
          name: borrow_id
          schema:
            type: integer
          required: true
          description: ID of the borrow to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBorrow'
      responses:
        '200':
          description: Borrow updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Borrow not found.
        '400':
          description: Invalid input.
      tags:
        - Borrows
    delete:
      summary: Delete a borrow
      description: Delete a borrow record by its ID.
      parameters:
        - in: path
          name: borrow_id
          schema:
            type: integer
          required: true
          description: ID of the borrow to delete.
      responses:
        '200':
          description: Borrow deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Borrow not found.
      tags:
        - Borrows
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
        author:
          type: string
        year:
          type: integer
      required:
        - title
        - author
        - year
    NewBook:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        year:
          type: integer
      required:
        - title
        - author
        - year
    Borrow:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book_id:
          type: integer
        borrower_name:
          type: string
        borrow_date:
          type: string
          format: date
        return_date:
          type: string
          format: date
          nullable: true
      required:
        - book_id
        - borrower_name
        - borrow_date
    NewBorrow:
      type: object
      properties:
        book_id:
          type: integer
        borrower_name:
          type: string
        borrow_date:
          type: string
          format: date
        return_date:
          type: string
          format: date
          nullable: true
      required:
        - book_id
        - borrower_name
        - borrow_date